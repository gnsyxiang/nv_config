
return {
    {
        "hrsh7th/nvim-cmp",
        event = "InsertEnter",
        dependencies = {
            "hrsh7th/cmp-nvim-lsp",           -- LSP 补全源
            "hrsh7th/cmp-buffer",             -- 缓冲区文本补全
            "hrsh7th/cmp-path",               -- 文件路径补全
            "hrsh7th/cmp-cmdline",            -- 命令行补全
            "saadparwaiz1/cmp_luasnip",       -- LuaSnip 片段支持
            "L3MON4D3/LuaSnip",               -- 片段引擎
            "rafamadriz/friendly-snippets",   -- 预定义片段集合
        },
        config = function()
            local cmp = require("cmp")
            local luasnip = require("luasnip")

local cmp = require('cmp')
local luasnip = require('luasnip')

cmp.setup({
    snippet = {
        expand = function(args)
            luasnip.lsp_expand(args.body)
        end,
    },
    mapping = cmp.mapping.preset.insert({
        ['<C-b>']       = cmp.mapping.scroll_docs(-4),
        ['<C-f>']       = cmp.mapping.scroll_docs(4),
        ['<C-Space>']   = cmp.mapping.complete(),
        ['<C-e>']       = cmp.mapping.abort(),
        ['<CR>']        = cmp.mapping.confirm({ select = true }),
        ['<Tab>']       = cmp.mapping(function(fallback)
            if cmp.visible() then
                cmp.select_next_item()
            elseif luasnip.expand_or_jumpable() then
                luasnip.expand_or_jump()
            else
                fallback()
            end
        end, { 'i', 's' }),
        ['<S-Tab>']     = cmp.mapping(function(fallback)
            if cmp.visible() then
                cmp.select_prev_item()
            elseif luasnip.jumpable(-1) then
                luasnip.jump(-1)
            else
                fallback()
            end
        end, { 'i', 's' }),
    }),
    sources = cmp.config.sources({
        { name = "nvim_lsp" },
        { name = "luasnip" },
        { name = "buffer" },
        { name = "path" },
    })
})

-- 命令行自动补全设置
cmp.setup.cmdline({ '/', '?' }, {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
        { name = 'buffer' }
    }
})

cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources(
        {
            { name = 'path' }
        }, {
            { name = 'cmdline' }
        }
    )
})

    --
    --         -- 加载友好片段
    --         require("luasnip.loaders.from_vscode").lazy_load()
    --
    --         cmp.setup({
    --             -- 片段引擎配置
    --             snippet = {
    --                 expand = function(args)
    --                     luasnip.lsp_expand(args.body)
    --                 end,
    --             },
    --
    --             -- 映射配置
    --             mapping = cmp.mapping.preset.insert({
    --                 ["<CR>"] = cmp.mapping.confirm({ select = true }),  -- 确认选择
    --                 ["<C-Space>"] = cmp.mapping.complete(),             -- 打开/关闭补全
    --                 ["<C-e>"] = cmp.mapping.abort(),                    -- 取消补全
    --
    --                 ["<C-p>"] = cmp.mapping.select_prev_item(),         -- 导航
    --                 ["<C-n>"] = cmp.mapping.select_next_item(),
    --                 ["<C-k>"] = cmp.mapping.select_prev_item(),
    --                 ["<C-j>"] = cmp.mapping.select_next_item(),
    --                 ["<Up>"] = cmp.mapping.select_prev_item(),
    --                 ["<Down>"] = cmp.mapping.select_next_item(),
    --
    --                 ["<C-b>"] = cmp.mapping.scroll_docs(-4),            -- 滚动文档窗口
    --                 ["<C-f>"] = cmp.mapping.scroll_docs(4),
    --
    --                 ["<Tab>"] = cmp.mapping(function()                  -- 片段跳转
    --                     if luasnip.expand_or_locally_jumpable() then
    --                         luasnip.expand_or_jump()
    --                     end
    --                 end, { "i", "s" }),
    --                 ["<S-Tab>"] = cmp.mapping(function()
    --                     if luasnip.locally_jumpable(-1) then
    --                         luasnip.jump(-1)
    --                     end
    --                 end, { "i", "s" }),
    --             }),
    --
    --             -- 补全源配置
    --             sources = cmp.config.sources({
    --                 { name = "nvim_lsp" },
    --                 { name = "luasnip" },
    --                 { name = "buffer" },
    --                 { name = "path" },
    --             }),
    --
    --             -- 格式化显示
    --             formatting = {
    --                 format = function(entry, vim_item)
    --                     -- 图标
    --                     local icons = {
    --                         Text = "",
    --                         Method = "󰆧",
    --                         Function = "󰊕",
    --                         Constructor = "",
    --                         Field = "󰇽",
    --                         Variable = "󰂡",
    --                         Class = "󰠱",
    --                         Interface = "",
    --                         Module = "",
    --                         Property = "󰜢",
    --                         Unit = "",
    --                         Value = "󰎠",
    --                         Enum = "",
    --                         Keyword = "󰌋",
    --                         Snippet = "",
    --                         Color = "󰏘",
    --                         File = "󰈙",
    --                         Reference = "",
    --                         Folder = "󰉋",
    --                         EnumMember = "",
    --                         Constant = "󰏿",
    --                         Struct = "",
    --                         Event = "",
    --                         Operator = "󰆕",
    --                         TypeParameter = "󰅲",
    --                     }
    --
    --                     vim_item.kind = string.format("%s %s", icons[vim_item.kind] or "", vim_item.kind)
    --
    --                     -- 源名称
    --                     vim_item.menu = ({
    --                         nvim_lsp = "[LSP]",
    --                         luasnip = "[Snippet]",
    --                         buffer = "[Buffer]",
    --                         path = "[Path]",
    --                         cmdline = "[Cmd]",
    --                     })[entry.source.name]
    --
    --                     return vim_item
    --                 end,
    --             },
    --
    --             -- 排序优先级
    --             sorting = {
    --                 comparators = {
    --                     cmp.config.compare.offset,
    --                     cmp.config.compare.exact,
    --                     cmp.config.compare.score,
    --                     cmp.config.compare.recently_used,
    --                     cmp.config.compare.kind,
    --                     cmp.config.compare.sort_text,
    --                     cmp.config.compare.length,
    --                     cmp.config.compare.order,
    --                 },
    --             },
    --
    --             -- 实验性功能
    --             experimental = {
    --                 ghost_text = true,  -- 显示幽灵文本预览
    --             },
    --         })
    --
    --         -- 命令行补全配置
    --         cmp.setup.cmdline(":", {
    --             mapping = cmp.mapping.preset.cmdline(),
    --             sources = cmp.config.sources({
    --                 { name = "path" },
    --             }, {
    --                     { name = "cmdline" },
    --                 }),
    --         })
    --
    --         cmp.setup.cmdline("/", {
    --             mapping = cmp.mapping.preset.cmdline(),
    --             sources = {
    --                 { name = "buffer" },
    --             },
    --         })
        end,
    },
}

